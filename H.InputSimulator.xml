<?xml version="1.0"?>
<doc>
    <assembly>
        <name>H.InputSimulator</name>
    </assembly>
    <members>
        <member name="T:WindowsInput.IInputDeviceStateAdaptor">
            <summary>
            The contract for a service that interprets the state of input devices.
            </summary>
        </member>
        <member name="M:WindowsInput.IInputDeviceStateAdaptor.IsKeyDown(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the specified key is up or down.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the key is down; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WindowsInput.IInputDeviceStateAdaptor.IsKeyUp(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the specified key is up or down.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the key is up; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WindowsInput.IInputDeviceStateAdaptor.IsHardwareKeyDown(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the physical key is up or down at the time the function is called regardless of whether the application thread has read the keyboard event from the message pump.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the key is down; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WindowsInput.IInputDeviceStateAdaptor.IsHardwareKeyUp(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the physical key is up or down at the time the function is called regardless of whether the application thread has read the keyboard event from the message pump.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the key is up; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WindowsInput.IInputDeviceStateAdaptor.IsTogglingKeyInEffect(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the toggling key is toggled on (in-effect) or not.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the toggling key is toggled on (in-effect); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WindowsInput.IInputMessageDispatcher">
            <summary>
            The contract for a service that dispatches <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages to the appropriate destination.
            </summary>
        </member>
        <member name="M:WindowsInput.IInputMessageDispatcher.DispatchInput(Windows.Win32.UI.Input.KeyboardAndMouse.INPUT[])">
            <summary>
            Dispatches the specified list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages in their specified order.
            </summary>
            <param name="inputs">The list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages to be dispatched.</param>
            <exception cref="T:System.ArgumentException">If the <paramref name="inputs"/> array is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="inputs"/> array is null.</exception>
            <exception cref="T:System.Exception">If the any of the commands in the <paramref name="inputs"/> array could not be sent successfully.</exception>
        </member>
        <member name="T:WindowsInput.IInputSimulator">
            <summary>
            The contract for a service that simulates Keyboard and Mouse input and Hardware Input Device state detection for the Windows Platform.
            </summary>
        </member>
        <member name="P:WindowsInput.IInputSimulator.Keyboard">
            <summary>
            Gets the <see cref="T:WindowsInput.IKeyboardSimulator"/> instance for simulating Keyboard input.
            </summary>
            <value>The <see cref="T:WindowsInput.IKeyboardSimulator"/> instance.</value>
        </member>
        <member name="P:WindowsInput.IInputSimulator.Mouse">
            <summary>
            Gets the <see cref="T:WindowsInput.IMouseSimulator"/> instance for simulating Mouse input.
            </summary>
            <value>The <see cref="T:WindowsInput.IMouseSimulator"/> instance.</value>
        </member>
        <member name="P:WindowsInput.IInputSimulator.InputDeviceState">
            <summary>
            Gets the <see cref="T:WindowsInput.IInputDeviceStateAdaptor"/> instance for determining the state of the various input devices.
            </summary>
            <value>The <see cref="T:WindowsInput.IInputDeviceStateAdaptor"/> instance.</value>
        </member>
        <member name="T:WindowsInput.IKeyboardSimulator">
            <summary>
            The service contract for a keyboard simulator for the Windows platform.
            </summary>
        </member>
        <member name="P:WindowsInput.IKeyboardSimulator.Mouse">
            <summary>
            Gets the <see cref="T:WindowsInput.IMouseSimulator"/> instance for simulating Mouse input.
            </summary>
            <value>The <see cref="T:WindowsInput.IMouseSimulator"/> instance.</value>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.KeyDown(WindowsInput.VirtualKeyCode)">
            <summary>
            Simulates the key down gesture for the specified key.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.KeyDown(WindowsInput.VirtualKeyCode[])">
            <summary>
            Simulates the key down gesture for the specified key codes in the order they are specified.
            </summary>
            <param name="keyCodes"></param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.KeyPress(WindowsInput.VirtualKeyCode)">
            <summary>
            Simulates the key press gesture for the specified key.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.KeyPress(WindowsInput.VirtualKeyCode[])">
            <summary>
            Simulates a key press for each of the specified key codes in the order they are specified.
            </summary>
            <param name="keyCodes"></param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.KeyUp(WindowsInput.VirtualKeyCode)">
            <summary>
            Simulates the key up gesture for the specified key.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.KeyUp(WindowsInput.VirtualKeyCode[])">
            <summary>
            Simulates the key up gesture for the specified key codes in the reverse order they are specified.
            </summary>
            <param name="keyCodes"></param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.ModifiedKeyStroke(System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode},System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode})">
            <summary>
            Simulates a modified keystroke where there are multiple modifiers and multiple keys like CTRL-ALT-K-C where CTRL and ALT are the modifierKeys and K and C are the keys.
            The flow is Modifiers KeyDown in order, Keys Press in order, Modifiers KeyUp in reverse order.
            </summary>
            <param name="modifierKeyCodes">The list of <see cref="T:WindowsInput.VirtualKeyCode"/>s for the modifier keys.</param>
            <param name="keyCodes">The list of <see cref="T:WindowsInput.VirtualKeyCode"/>s for the keys to simulate.</param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.ModifiedKeyStroke(System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode},WindowsInput.VirtualKeyCode)">
            <summary>
            Simulates a modified keystroke where there are multiple modifiers and one key like CTRL-ALT-C where CTRL and ALT are the modifierKeys and C is the key.
            The flow is Modifiers KeyDown in order, Key Press, Modifiers KeyUp in reverse order.
            </summary>
            <param name="modifierKeyCodes">The list of <see cref="T:WindowsInput.VirtualKeyCode"/>s for the modifier keys.</param>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.ModifiedKeyStroke(WindowsInput.VirtualKeyCode,System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode})">
            <summary>
            Simulates a modified keystroke where there is one modifier and multiple keys like CTRL-K-C where CTRL is the modifierKey and K and C are the keys.
            The flow is Modifier KeyDown, Keys Press in order, Modifier KeyUp.
            </summary>
            <param name="modifierKey">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the modifier key.</param>
            <param name="keyCodes">The list of <see cref="T:WindowsInput.VirtualKeyCode"/>s for the keys to simulate.</param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.ModifiedKeyStroke(WindowsInput.VirtualKeyCode,WindowsInput.VirtualKeyCode)">
            <summary>
            Simulates a simple modified keystroke like CTRL-C where CTRL is the modifierKey and C is the key.
            The flow is Modifier KeyDown, Key Press, Modifier KeyUp.
            </summary>
            <param name="modifierKeyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the  modifier key.</param>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.TextEntry(System.String)">
            <summary>
            Simulates uninterrupted text entry via the keyboard.
            </summary>
            <param name="text">The text to be simulated.</param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.TextEntry(System.Char)">
            <summary>
            Simulates a single character text entry via the keyboard.
            </summary>
            <param name="character">The unicode character to be simulated.</param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.Sleep(System.Int32)">
            <summary>
            Sleeps the executing thread to create a pause between simulated inputs.
            </summary>
            <param name="millsecondsTimeout">The number of milliseconds to wait.</param>
        </member>
        <member name="M:WindowsInput.IKeyboardSimulator.Sleep(System.TimeSpan)">
            <summary>
            Sleeps the executing thread to create a pause between simulated inputs.
            </summary>
            <param name="timeout">The time to wait.</param>
        </member>
        <member name="T:WindowsInput.IMouseSimulator">
            <summary>
            The service contract for a mouse simulator for the Windows platform.
            </summary>
        </member>
        <member name="P:WindowsInput.IMouseSimulator.MouseWheelClickSize">
            <summary>
            Gets or sets the amount of mouse wheel scrolling per click. The default value for this property is 120 and different values may cause some applications to interpret the scrolling differently than expected.
            </summary>
        </member>
        <member name="P:WindowsInput.IMouseSimulator.Keyboard">
            <summary>
            Gets the <see cref="T:WindowsInput.IKeyboardSimulator"/> instance for simulating Keyboard input.
            </summary>
            <value>The <see cref="T:WindowsInput.IKeyboardSimulator"/> instance.</value>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.MoveMouseBy(System.Int32,System.Int32)">
            <summary>
            Simulates mouse movement by the specified distance measured as a delta from the current mouse location in pixels.
            </summary>
            <param name="pixelDeltaX">The distance in pixels to move the mouse horizontally.</param>
            <param name="pixelDeltaY">The distance in pixels to move the mouse vertically.</param>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.MoveMouseTo(System.Double,System.Double)">
            <summary>
            Simulates mouse movement to the specified location on the primary display device.
            </summary>
            <param name="absoluteX">The destination's absolute X-coordinate on the primary display device where 0 is the extreme left hand side of the display device and 65535 is the extreme right hand side of the display device.</param>
            <param name="absoluteY">The destination's absolute Y-coordinate on the primary display device where 0 is the top of the display device and 65535 is the bottom of the display device.</param>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.MoveMouseToPositionOnVirtualDesktop(System.Double,System.Double)">
            <summary>
            Simulates mouse movement to the specified location on the Virtual Desktop which includes all active displays.
            </summary>
            <param name="absoluteX">The destination's absolute X-coordinate on the virtual desktop where 0 is the left hand side of the virtual desktop and 65535 is the extreme right hand side of the virtual desktop.</param>
            <param name="absoluteY">The destination's absolute Y-coordinate on the virtual desktop where 0 is the top of the virtual desktop and 65535 is the bottom of the virtual desktop.</param>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.LeftButtonDown">
            <summary>
            Simulates a mouse left button down gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.LeftButtonUp">
            <summary>
            Simulates a mouse left button up gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.LeftButtonClick">
            <summary>
            Simulates a mouse left button click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.LeftButtonDoubleClick">
            <summary>
            Simulates a mouse left button double-click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.MiddleButtonDown">
            <summary>
            Simulates a mouse middle button down gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.MiddleButtonUp">
            <summary>
            Simulates a mouse middle button up gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.MiddleButtonClick">
            <summary>
            Simulates a mouse middle button click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.MiddleButtonDoubleClick">
            <summary>
            Simulates a mouse middle button double-click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.RightButtonDown">
            <summary>
            Simulates a mouse right button down gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.RightButtonUp">
            <summary>
            Simulates a mouse right button up gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.RightButtonClick">
            <summary>
            Simulates a mouse right button click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.RightButtonDoubleClick">
            <summary>
            Simulates a mouse right button double-click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.XButtonDown(System.Int32)">
            <summary>
            Simulates a mouse X button down gesture.
            </summary>
            <param name="buttonId">The button id.</param>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.XButtonUp(System.Int32)">
            <summary>
            Simulates a mouse X button up gesture.
            </summary>
            <param name="buttonId">The button id.</param>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.XButtonClick(System.Int32)">
            <summary>
            Simulates a mouse X button click gesture.
            </summary>
            <param name="buttonId">The button id.</param>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.XButtonDoubleClick(System.Int32)">
            <summary>
            Simulates a mouse X button double-click gesture.
            </summary>
            <param name="buttonId">The button id.</param>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.VerticalScroll(System.Int32)">
            <summary>
            Simulates mouse vertical wheel scroll gesture.
            </summary>
            <param name="scrollAmountInClicks">The amount to scroll in clicks. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user.</param>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.HorizontalScroll(System.Int32)">
            <summary>
            Simulates a mouse horizontal wheel scroll gesture. Supported by Windows Vista and later.
            </summary>
            <param name="scrollAmountInClicks">The amount to scroll in clicks. A positive value indicates that the wheel was rotated to the right; a negative value indicates that the wheel was rotated to the left.</param>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.Sleep(System.Int32)">
            <summary>
            Sleeps the executing thread to create a pause between simulated inputs.
            </summary>
            <param name="millsecondsTimeout">The number of milliseconds to wait.</param>
        </member>
        <member name="M:WindowsInput.IMouseSimulator.Sleep(System.TimeSpan)">
            <summary>
            Sleeps the executing thread to create a pause between simulated inputs.
            </summary>
            <param name="timeout">The time to wait.</param>
        </member>
        <member name="T:WindowsInput.InputBuilder">
            <summary>
            A helper class for building a list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages ready 
            to be sent to the native Windows API.
            </summary>
        </member>
        <member name="M:WindowsInput.InputBuilder.IsExtendedKey(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines if the <see cref="T:WindowsInput.VirtualKeyCode"/> is an ExtendedKey
            </summary>
            <param name="keyCode">The key code.</param>
            <returns>true if the key code is an extended key; otherwise, false.</returns>
            <remarks>
            The extended keys consist of the ALT and CTRL keys on the right-hand side of the keyboard; 
            the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters 
            to the left of the numeric keypad; the NUM LOCK key; the BREAK (CTRL+PAUSE) key; 
            the PRINT SCRN key; and the divide (/) and ENTER keys in the numeric keypad.
            
            See http://msdn.microsoft.com/en-us/library/ms646267(v=vs.85).aspx Section "Extended-Key Flag"
            </remarks>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddKeyDown(WindowsInput.VirtualKeyCode)">
            <summary>
            Adds a key down to the list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/>.</param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddKeyUp(WindowsInput.VirtualKeyCode)">
            <summary>
            Adds a key up to the list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/>.</param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddKeyPress(WindowsInput.VirtualKeyCode)">
            <summary>
            Adds a key press to the list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages which is equivalent to a key down followed by a key up.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/>.</param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddCharacter(System.Char)">
            <summary>
            Adds the character to the list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </summary>
            <param name="character">The <see cref="T:System.Char"/> to be added to the list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.</param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddCharacters(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Adds all of the characters in the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/>.
            </summary>
            <param name="characters">The characters to add.</param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddCharacters(System.String)">
            <summary>
            Adds the characters in the specified <see cref="T:System.String"/>.
            </summary>
            <param name="characters">The string of <see cref="T:System.Char"/> to add.</param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddRelativeMouseMovement(System.Int32,System.Int32)">
            <summary>
            Moves the mouse relative to its current position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddAbsoluteMouseMovement(System.Int32,System.Int32)">
            <summary>
            Move the mouse to an absolute position.
            </summary>
            <param name="absoluteX"></param>
            <param name="absoluteY"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddAbsoluteMouseMovementOnVirtualDesktop(System.Int32,System.Int32)">
            <summary>
            Move the mouse to the absolute position on the virtual desktop.
            </summary>
            <param name="absoluteX"></param>
            <param name="absoluteY"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddMouseButtonDown(WindowsInput.MouseButton)">
            <summary>
            Adds a mouse button down for the specified button.
            </summary>
            <param name="button"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddMouseXButtonDown(System.Int32)">
            <summary>
            Adds a mouse button down for the specified button.
            </summary>
            <param name="xButtonId"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddMouseButtonUp(WindowsInput.MouseButton)">
            <summary>
            Adds a mouse button up for the specified button.
            </summary>
            <param name="button"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddMouseXButtonUp(System.Int32)">
            <summary>
            Adds a mouse button up for the specified button.
            </summary>
            <param name="xButtonId"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddMouseButtonClick(WindowsInput.MouseButton)">
            <summary>
            Adds a single click of the specified button.
            </summary>
            <param name="button"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddMouseXButtonClick(System.Int32)">
            <summary>
            Adds a single click of the specified button.
            </summary>
            <param name="xButtonId"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddMouseButtonDoubleClick(WindowsInput.MouseButton)">
            <summary>
            Adds a double click of the specified button.
            </summary>
            <param name="button"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddMouseXButtonDoubleClick(System.Int32)">
            <summary>
            Adds a double click of the specified button.
            </summary>
            <param name="xButtonId"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddMouseVerticalWheelScroll(System.Int32)">
            <summary>
            Scroll the vertical mouse wheel by the specified amount.
            </summary>
            <param name="scrollAmount"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="M:WindowsInput.InputBuilder.AddMouseHorizontalWheelScroll(System.Int32)">
            <summary>
            Scroll the horizontal mouse wheel by the specified amount.
            </summary>
            <param name="scrollAmount"></param>
            <returns>This <see cref="T:WindowsInput.InputBuilder"/> instance.</returns>
        </member>
        <member name="T:WindowsInput.InputSimulator">
            <summary>
            Implements the <see cref="T:WindowsInput.IInputSimulator"/> interface to 
            simulate Keyboard and Mouse input and provide the state of those input devices.
            </summary>
        </member>
        <member name="P:WindowsInput.InputSimulator.Keyboard">
            <summary>
            Gets the <see cref="T:WindowsInput.IKeyboardSimulator"/> instance for simulating Keyboard input.
            </summary>
            <value>The <see cref="T:WindowsInput.IKeyboardSimulator"/> instance.</value>
        </member>
        <member name="P:WindowsInput.InputSimulator.Mouse">
            <summary>
            Gets the <see cref="T:WindowsInput.IMouseSimulator"/> instance for simulating Mouse input.
            </summary>
            <value>The <see cref="T:WindowsInput.IMouseSimulator"/> instance.</value>
        </member>
        <member name="P:WindowsInput.InputSimulator.InputDeviceState">
            <summary>
            Gets the <see cref="T:WindowsInput.IInputDeviceStateAdaptor"/> instance for 
            determining the state of the various input devices.
            </summary>
            <value>The <see cref="T:WindowsInput.IInputDeviceStateAdaptor"/> instance.</value>
        </member>
        <member name="M:WindowsInput.InputSimulator.#ctor(WindowsInput.IKeyboardSimulator,WindowsInput.IMouseSimulator,WindowsInput.IInputDeviceStateAdaptor)">
            <summary>
            Initializes a new instance of the <see cref="T:WindowsInput.InputSimulator"/> class using 
            the specified <see cref="T:WindowsInput.IKeyboardSimulator"/>, <see cref="T:WindowsInput.IMouseSimulator"/> 
            and <see cref="T:WindowsInput.IInputDeviceStateAdaptor"/> instances.
            </summary>
            <param name="keyboardSimulator">
            The <see cref="T:WindowsInput.IKeyboardSimulator"/> instance to use for simulating keyboard input.
            </param>
            <param name="mouseSimulator">
            The <see cref="T:WindowsInput.IMouseSimulator"/> instance to use for simulating mouse input.
            </param>
            <param name="inputDeviceStateAdaptor">
            The <see cref="T:WindowsInput.IInputDeviceStateAdaptor"/> instance to use 
            for interpreting the state of input devices.
            </param>
        </member>
        <member name="M:WindowsInput.InputSimulator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WindowsInput.InputSimulator"/> class 
            using the default <see cref="T:WindowsInput.KeyboardSimulator"/>, <see cref="T:WindowsInput.MouseSimulator"/> 
            and <see cref="T:WindowsInput.WindowsInputDeviceStateAdaptor"/> instances.
            </summary>
        </member>
        <member name="T:WindowsInput.KeyboardSimulator">
            <summary>
            Implements the <see cref="T:WindowsInput.IKeyboardSimulator"/> interface by calling 
            the an <see cref="T:WindowsInput.IInputMessageDispatcher"/> to simulate Keyboard gestures.
            </summary>
        </member>
        <member name="P:WindowsInput.KeyboardSimulator.MessageDispatcher">
            <summary>
            The instance of the <see cref="T:WindowsInput.IInputMessageDispatcher"/> 
            to use for dispatching <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </summary>
        </member>
        <member name="P:WindowsInput.KeyboardSimulator.Mouse">
            <summary>
            Gets the <see cref="T:WindowsInput.IMouseSimulator"/> instance for simulating Mouse input.
            </summary>
            <value>The <see cref="T:WindowsInput.IMouseSimulator"/> instance.</value>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.#ctor(WindowsInput.IInputSimulator)">
            <summary>
            Initializes a new instance of the <see cref="T:WindowsInput.KeyboardSimulator"/> class 
            using an instance of a <see cref="T:WindowsInput.WindowsInputMessageDispatcher"/> for
            dispatching <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </summary>
            <param name="inputSimulator">
            The <see cref="T:WindowsInput.IInputSimulator"/> that owns this instance.
            </param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.#ctor(WindowsInput.IInputSimulator,WindowsInput.IInputMessageDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:WindowsInput.KeyboardSimulator"/> class 
            using the specified <see cref="T:WindowsInput.IInputMessageDispatcher"/> for 
            dispatching <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </summary>
            <param name="inputSimulator">
            The <see cref="T:WindowsInput.IInputSimulator"/> that owns this instance.
            </param>
            <param name="messageDispatcher">
            The <see cref="T:WindowsInput.IInputMessageDispatcher"/> to use for 
            dispatching <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If null is passed as the <paramref name="messageDispatcher"/>.
            </exception>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.SendSimulatedInput(Windows.Win32.UI.Input.KeyboardAndMouse.INPUT[])">
            <summary>
            Sends the list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages using 
            the <see cref="T:WindowsInput.IInputMessageDispatcher"/> instance.
            </summary>
            <param name="inputList">
            The <see cref="T:System.Array"/> of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages to send.
            </param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.KeyDown(WindowsInput.VirtualKeyCode)">
            <summary>
            Calls the Win32 SendInput method to simulate a KeyDown.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> to press</param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.KeyDown(WindowsInput.VirtualKeyCode[])">
            <summary>
            Calls the Win32 SendInput method to simulate a KeyDown
            for the specified key codes in the order they are specified.
            </summary>
            <param name="keyCodes"></param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.KeyUp(WindowsInput.VirtualKeyCode)">
            <summary>
            Calls the Win32 SendInput method to simulate a KeyUp.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> to lift up</param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.KeyUp(WindowsInput.VirtualKeyCode[])">
            <summary>
            Calls the Win32 SendInput method to simulate a KeyUp
            for the specified key codes in the reverse order they are specified.
            </summary>
            <param name="keyCodes"></param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.KeyPress(WindowsInput.VirtualKeyCode)">
            <summary>
            Calls the Win32 SendInput method with a KeyDown and KeyUp message 
            in the same input sequence in order to simulate a Key PRESS.
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> to press</param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.KeyPress(WindowsInput.VirtualKeyCode[])">
            <summary>
            Simulates a key press for each of the specified key codes 
            in the order they are specified.
            </summary>
            <param name="keyCodes"></param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.ModifiedKeyStroke(WindowsInput.VirtualKeyCode,WindowsInput.VirtualKeyCode)">
            <summary>
            Simulates a simple modified keystroke like CTRL-C where CTRL is the modifierKey and C is the key.
            The flow is Modifier KeyDown, Key Press, Modifier KeyUp.
            </summary>
            <param name="modifierKeyCode">The modifier key</param>
            <param name="keyCode">The key to simulate</param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.ModifiedKeyStroke(System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode},WindowsInput.VirtualKeyCode)">
            <summary>
            Simulates a modified keystroke where there are multiple modifiers 
            and one key like CTRL-ALT-C where CTRL and ALT are the modifierKeys and C is the key.
            The flow is Modifiers KeyDown in order, Key Press, Modifiers KeyUp in reverse order.
            </summary>
            <param name="modifierKeyCodes">The list of modifier keys</param>
            <param name="keyCode">The key to simulate</param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.ModifiedKeyStroke(WindowsInput.VirtualKeyCode,System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode})">
            <summary>
            Simulates a modified keystroke where there is one modifier and 
            multiple keys like CTRL-K-C where CTRL is the modifierKey and K and C are the keys.
            The flow is Modifier KeyDown, Keys Press in order, Modifier KeyUp.
            </summary>
            <param name="modifierKey">The modifier key</param>
            <param name="keyCodes">The list of keys to simulate</param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.ModifiedKeyStroke(System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode},System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode})">
            <summary>
            Simulates a modified keystroke where there are multiple modifiers and 
            multiple keys like CTRL-ALT-K-C where CTRL and ALT are the modifierKeys and K and C are the keys.
            The flow is Modifiers KeyDown in order, Keys Press in order, Modifiers KeyUp in reverse order.
            </summary>
            <param name="modifierKeyCodes">The list of modifier keys</param>
            <param name="keyCodes">The list of keys to simulate</param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.TextEntry(System.String)">
            <summary>
            Calls the Win32 SendInput method with a stream of KeyDown and 
            KeyUp messages in order to simulate uninterrupted text entry via the keyboard.
            </summary>
            <param name="text">The text to be simulated.</param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.TextEntry(System.Char)">
            <summary>
            Simulates a single character text entry via the keyboard.
            </summary>
            <param name="character">The unicode character to be simulated.</param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.Sleep(System.Int32)">
            <summary>
            Sleeps the executing thread to create a pause between simulated inputs.
            </summary>
            <param name="millsecondsTimeout">The number of milliseconds to wait.</param>
        </member>
        <member name="M:WindowsInput.KeyboardSimulator.Sleep(System.TimeSpan)">
            <summary>
            Sleeps the executing thread to create a pause between simulated inputs.
            </summary>
            <param name="timeout">The time to wait.</param>
        </member>
        <member name="T:WindowsInput.MouseButton">
            <summary>
            The mouse button
            </summary>
        </member>
        <member name="F:WindowsInput.MouseButton.LeftButton">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:WindowsInput.MouseButton.MiddleButton">
            <summary>
            Middle mouse button
            </summary>
        </member>
        <member name="F:WindowsInput.MouseButton.RightButton">
            <summary>
            Right moust button
            </summary>
        </member>
        <member name="T:WindowsInput.MouseSimulator">
            <summary>
            Implements the <see cref="T:WindowsInput.IMouseSimulator"/> interface 
            by calling the an <see cref="T:WindowsInput.IInputMessageDispatcher"/> to simulate Mouse gestures.
            </summary>
        </member>
        <member name="P:WindowsInput.MouseSimulator.MessageDispatcher">
            <summary>
            The instance of the <see cref="T:WindowsInput.IInputMessageDispatcher"/> 
            to use for dispatching <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </summary>
        </member>
        <member name="P:WindowsInput.MouseSimulator.Keyboard">
            <summary>
            Gets the <see cref="T:WindowsInput.IKeyboardSimulator"/> instance for simulating Keyboard input.
            </summary>
            <value>The <see cref="T:WindowsInput.IKeyboardSimulator"/> instance.</value>
        </member>
        <member name="P:WindowsInput.MouseSimulator.MouseWheelClickSize">
            <summary>
            Gets or sets the amount of mouse wheel scrolling per click. 
            The default value for this property is 120 and different values 
            may cause some applications to interpret the scrolling differently than expected.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.#ctor(WindowsInput.IInputSimulator)">
            <summary>
            Initializes a new instance of the <see cref="T:WindowsInput.MouseSimulator"/> class 
            using an instance of a <see cref="T:WindowsInput.WindowsInputMessageDispatcher"/> for 
            dispatching <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </summary>
            <param name="inputSimulator">The <see cref="T:WindowsInput.IInputSimulator"/> that owns this instance.</param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.#ctor(WindowsInput.IInputSimulator,WindowsInput.IInputMessageDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:WindowsInput.MouseSimulator"/> class 
            using the specified <see cref="T:WindowsInput.IInputMessageDispatcher"/> for 
            dispatching <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </summary>
            <param name="inputSimulator">
            The <see cref="T:WindowsInput.IInputSimulator"/> that owns this instance.
            </param>
            <param name="messageDispatcher">
            The <see cref="T:WindowsInput.IInputMessageDispatcher"/> to use for dispatching <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If null is passed as the <paramref name="messageDispatcher"/>.
            </exception>
        </member>
        <member name="M:WindowsInput.MouseSimulator.SendSimulatedInput(Windows.Win32.UI.Input.KeyboardAndMouse.INPUT[])">
            <summary>
            Sends the list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages using the <see cref="T:WindowsInput.IInputMessageDispatcher"/> instance.
            </summary>
            <param name="inputList">The <see cref="T:System.Array"/> of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages to send.</param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.MoveMouseBy(System.Int32,System.Int32)">
            <summary>
            Simulates mouse movement by the specified distance measured 
            as a delta from the current mouse location in pixels.
            </summary>
            <param name="pixelDeltaX">The distance in pixels to move the mouse horizontally.</param>
            <param name="pixelDeltaY">The distance in pixels to move the mouse vertically.</param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.MoveMouseTo(System.Double,System.Double)">
            <summary>
            Simulates mouse movement to the specified location on the primary display device.
            </summary>
            <param name="absoluteX">
            The destination's absolute X-coordinate on the primary display device 
            where 0 is the extreme left hand side of the display device and 
            65535 is the extreme right hand side of the display device.
            </param>
            <param name="absoluteY">
            The destination's absolute Y-coordinate on the primary display device 
            where 0 is the top of the display device and 65535 is the bottom of the display device.
            </param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.MoveMouseToPositionOnVirtualDesktop(System.Double,System.Double)">
            <summary>
            Simulates mouse movement to the specified location 
            on the Virtual Desktop which includes all active displays.
            </summary>
            <param name="absoluteX">
            The destination's absolute X-coordinate on the virtual desktop 
            where 0 is the left hand side of the virtual desktop and 
            65535 is the extreme right hand side of the virtual desktop.
            </param>
            <param name="absoluteY">
            The destination's absolute Y-coordinate on the virtual desktop 
            where 0 is the top of the virtual desktop and 
            65535 is the bottom of the virtual desktop.
            </param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.LeftButtonDown">
            <summary>
            Simulates a mouse left button down gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.LeftButtonUp">
            <summary>
            Simulates a mouse left button up gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.LeftButtonClick">
            <summary>
            Simulates a mouse left-click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.LeftButtonDoubleClick">
            <summary>
            Simulates a mouse left button double-click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.MiddleButtonDown">
            <summary>
            Simulates a mouse middle button down gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.MiddleButtonUp">
            <summary>
            Simulates a mouse middle button up gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.MiddleButtonClick">
            <summary>
            Simulates a mouse middle button click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.MiddleButtonDoubleClick">
            <summary>
            Simulates a mouse middle button double click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.RightButtonDown">
            <summary>
            Simulates a mouse right button down gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.RightButtonUp">
            <summary>
            Simulates a mouse right button up gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.RightButtonClick">
            <summary>
            Simulates a mouse right button click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.RightButtonDoubleClick">
            <summary>
            Simulates a mouse right button double-click gesture.
            </summary>
        </member>
        <member name="M:WindowsInput.MouseSimulator.XButtonDown(System.Int32)">
            <summary>
            Simulates a mouse X button down gesture.
            </summary>
            <param name="buttonId">The button id.</param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.XButtonUp(System.Int32)">
            <summary>
            Simulates a mouse X button up gesture.
            </summary>
            <param name="buttonId">The button id.</param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.XButtonClick(System.Int32)">
            <summary>
            Simulates a mouse X button click gesture.
            </summary>
            <param name="buttonId">The button id.</param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.XButtonDoubleClick(System.Int32)">
            <summary>
            Simulates a mouse X button double-click gesture.
            </summary>
            <param name="buttonId">The button id.</param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.VerticalScroll(System.Int32)">
            <summary>
            Simulates mouse vertical wheel scroll gesture.
            </summary>
            <param name="scrollAmountInClicks">
            The amount to scroll in clicks. A positive value indicates 
            that the wheel was rotated forward, away from the user; 
            a negative value indicates that the wheel was rotated backward, toward the user.
            </param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.HorizontalScroll(System.Int32)">
            <summary>
            Simulates a mouse horizontal wheel scroll gesture. 
            Supported by Windows Vista and later.
            </summary>
            <param name="scrollAmountInClicks">
            The amount to scroll in clicks. A positive value indicates 
            that the wheel was rotated to the right; a negative value 
            indicates that the wheel was rotated to the left.
            </param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.Sleep(System.Int32)">
            <summary>
            Sleeps the executing thread to create a pause between simulated inputs.
            </summary>
            <param name="millsecondsTimeout">The number of milliseconds to wait.</param>
        </member>
        <member name="M:WindowsInput.MouseSimulator.Sleep(System.TimeSpan)">
            <summary>
            Sleeps the executing thread to create a pause between simulated inputs.
            </summary>
            <param name="timeout">The time to wait.</param>
        </member>
        <member name="T:WindowsInput.VirtualKeyCode">
            <summary>
            The list of VirtualKeyCodes (see: http://msdn.microsoft.com/en-us/library/ms645540(VS.85).aspx)
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MBUTTON">
            <summary>
            Middle mouse button (three-button mouse) - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.XBUTTON1">
            <summary>
            Windows 2000/XP: X1 mouse button - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.XBUTTON2">
            <summary>
            Windows 2000/XP: X2 mouse button - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RETURN">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CONTROL">
            <summary>
            CTRL key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.KANA">
            <summary>
            Input Method Editor (IME) Kana mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.HANGEUL">
            <summary>
            IME Hanguel mode (maintained for compatibility; use HANGUL)
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.HANGUL">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.HANJA">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LWIN">
            <summary>
            Left Windows key (Microsoft Natural keyboard)
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RWIN">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.APPS">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MULTIPLY">
            <summary>
            Multiply key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.ADD">
            <summary>
            Add key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SUBTRACT">
            <summary>
            Subtract key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.DECIMAL">
            <summary>
            Decimal key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.DIVIDE">
            <summary>
            Divide key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F13">
            <summary>
            F13 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F14">
            <summary>
            F14 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F15">
            <summary>
            F15 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F16">
            <summary>
            F16 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F17">
            <summary>
            F17 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F18">
            <summary>
            F18 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F19">
            <summary>
            F19 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F20">
            <summary>
            F20 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F21">
            <summary>
            F21 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F22">
            <summary>
            F22 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F23">
            <summary>
            F23 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F24">
            <summary>
            F24 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SCROLL">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LSHIFT">
            <summary>
            Left SHIFT key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RSHIFT">
            <summary>
            Right SHIFT key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LCONTROL">
            <summary>
            Left CONTROL key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RCONTROL">
            <summary>
            Right CONTROL key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LMENU">
            <summary>
            Left MENU key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RMENU">
            <summary>
            Right MENU key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_BACK">
            <summary>
            Windows 2000/XP: Browser Back key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_FORWARD">
            <summary>
            Windows 2000/XP: Browser Forward key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_REFRESH">
            <summary>
            Windows 2000/XP: Browser Refresh key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_STOP">
            <summary>
            Windows 2000/XP: Browser Stop key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_SEARCH">
            <summary>
            Windows 2000/XP: Browser Search key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_FAVORITES">
            <summary>
            Windows 2000/XP: Browser Favorites key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_HOME">
            <summary>
            Windows 2000/XP: Browser Start and Home key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VOLUME_MUTE">
            <summary>
            Windows 2000/XP: Volume Mute key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VOLUME_DOWN">
            <summary>
            Windows 2000/XP: Volume Down key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VOLUME_UP">
            <summary>
            Windows 2000/XP: Volume Up key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MEDIA_NEXT_TRACK">
            <summary>
            Windows 2000/XP: Next Track key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MEDIA_PREV_TRACK">
            <summary>
            Windows 2000/XP: Previous Track key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MEDIA_STOP">
            <summary>
            Windows 2000/XP: Stop Media key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MEDIA_PLAY_PAUSE">
            <summary>
            Windows 2000/XP: Play/Pause Media key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LAUNCH_MAIL">
            <summary>
            Windows 2000/XP: Start Mail key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LAUNCH_MEDIA_SELECT">
            <summary>
            Windows 2000/XP: Select Media key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LAUNCH_APP1">
            <summary>
            Windows 2000/XP: Start Application 1 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LAUNCH_APP2">
            <summary>
            Windows 2000/XP: Start Application 2 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the ';:' key 
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_PLUS">
            <summary>
            Windows 2000/XP: For any country/region, the '+' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_COMMA">
            <summary>
            Windows 2000/XP: For any country/region, the ',' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_MINUS">
            <summary>
            Windows 2000/XP: For any country/region, the '-' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_PERIOD">
            <summary>
            Windows 2000/XP: For any country/region, the '.' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '/?' key 
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '`~' key 
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '[{' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '\|' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the ']}' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the 'single-quote/double-quote' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_102">
            <summary>
            Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PROCESSKEY">
            <summary>
            Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PACKET">
            <summary>
            Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes. The PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.ATTN">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CRSEL">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.EXSEL">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.EREOF">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PLAY">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.ZOOM">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NONAME">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PA1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_CLEAR">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="T:WindowsInput.WindowsInputDeviceStateAdaptor">
            <summary>
            An implementation of <see cref="T:WindowsInput.IInputDeviceStateAdaptor"/> for Windows by calling the native <see cref="M:Windows.Win32.PInvoke.GetKeyState(System.Int32)"/> and <see cref="M:Windows.Win32.PInvoke.GetAsyncKeyState(System.Int32)"/> methods.
            </summary>
        </member>
        <member name="M:WindowsInput.WindowsInputDeviceStateAdaptor.IsKeyDown(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the specified key is up or down by calling the GetKeyState function. (See: http://msdn.microsoft.com/en-us/library/ms646301(VS.85).aspx)
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the key is down; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The key status returned from this function changes as a thread reads key messages from its message queue. The status does not reflect the interrupt-level state associated with the hardware. Use the GetAsyncKeyState function to retrieve that information. 
            An application calls GetKeyState in response to a keyboard-input message. This function retrieves the state of the key when the input message was generated. 
            To retrieve state information for all the virtual keys, use the GetKeyboardState function. 
            An application can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for Bthe nVirtKey parameter. This gives the status of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. An application can also use the following virtual-key code constants as values for nVirtKey to distinguish between the left and right instances of those keys. 
            VK_LSHIFT
            VK_RSHIFT
            VK_LCONTROL
            VK_RCONTROL
            VK_LMENU
            VK_RMENU
            
            These left- and right-distinguishing constants are available to an application only through the GetKeyboardState, SetKeyboardState, GetAsyncKeyState, GetKeyState, and MapVirtualKey functions. 
            </remarks>
        </member>
        <member name="M:WindowsInput.WindowsInputDeviceStateAdaptor.IsKeyUp(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the specified key is up or downby calling the <see cref="M:Windows.Win32.PInvoke.GetKeyState(System.Int32)"/> function. (See: http://msdn.microsoft.com/en-us/library/ms646301(VS.85).aspx)
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the key is up; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The key status returned from this function changes as a thread reads key messages from its message queue. The status does not reflect the interrupt-level state associated with the hardware. Use the GetAsyncKeyState function to retrieve that information. 
            An application calls GetKeyState in response to a keyboard-input message. This function retrieves the state of the key when the input message was generated. 
            To retrieve state information for all the virtual keys, use the GetKeyboardState function. 
            An application can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for Bthe nVirtKey parameter. This gives the status of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. An application can also use the following virtual-key code constants as values for nVirtKey to distinguish between the left and right instances of those keys. 
            VK_LSHIFT
            VK_RSHIFT
            VK_LCONTROL
            VK_RCONTROL
            VK_LMENU
            VK_RMENU
            
            These left- and right-distinguishing constants are available to an application only through the GetKeyboardState, SetKeyboardState, GetAsyncKeyState, GetKeyState, and MapVirtualKey functions. 
            </remarks>
        </member>
        <member name="M:WindowsInput.WindowsInputDeviceStateAdaptor.IsHardwareKeyDown(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the physical key is up or down at the time the function is called regardless of whether the application thread has read the keyboard event from the message pump by calling the <see cref="M:Windows.Win32.PInvoke.GetAsyncKeyState(System.Int32)"/> function. (See: http://msdn.microsoft.com/en-us/library/ms646293(VS.85).aspx)
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the key is down; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The GetAsyncKeyState function works with mouse buttons. However, it checks on the state of the physical mouse buttons, not on the logical mouse buttons that the physical buttons are mapped to. For example, the call GetAsyncKeyState(VK_LBUTTON) always returns the state of the left physical mouse button, regardless of whether it is mapped to the left or right logical mouse button. You can determine the system's current mapping of physical mouse buttons to logical mouse buttons by calling 
            Copy CodeGetSystemMetrics(SM_SWAPBUTTON) which returns TRUE if the mouse buttons have been swapped.
            
            Although the least significant bit of the return value indicates whether the key has been pressed since the last query, due to the pre-emptive multitasking nature of Windows, another application can call GetAsyncKeyState and receive the "recently pressed" bit instead of your application. The behavior of the least significant bit of the return value is retained strictly for compatibility with 16-bit Windows applications (which are non-preemptive) and should not be relied upon.
            
            You can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for the vKey parameter. This gives the state of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. 
            
            Windows NT/2000/XP: You can use the following virtual-key code constants as values for vKey to distinguish between the left and right instances of those keys. 
            
            Code Meaning 
            VK_LSHIFT Left-shift key. 
            VK_RSHIFT Right-shift key. 
            VK_LCONTROL Left-control key. 
            VK_RCONTROL Right-control key. 
            VK_LMENU Left-menu key. 
            VK_RMENU Right-menu key. 
            
            These left- and right-distinguishing constants are only available when you call the GetKeyboardState, SetKeyboardState, GetAsyncKeyState, GetKeyState, and MapVirtualKey functions. 
            </remarks>
        </member>
        <member name="M:WindowsInput.WindowsInputDeviceStateAdaptor.IsHardwareKeyUp(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the physical key is up or down at the time the function is called regardless of whether the application thread has read the keyboard event from the message pump by calling the <see cref="M:Windows.Win32.PInvoke.GetAsyncKeyState(System.Int32)"/> function. (See: http://msdn.microsoft.com/en-us/library/ms646293(VS.85).aspx)
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the key is up; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The GetAsyncKeyState function works with mouse buttons. However, it checks on the state of the physical mouse buttons, not on the logical mouse buttons that the physical buttons are mapped to. For example, the call GetAsyncKeyState(VK_LBUTTON) always returns the state of the left physical mouse button, regardless of whether it is mapped to the left or right logical mouse button. You can determine the system's current mapping of physical mouse buttons to logical mouse buttons by calling 
            Copy CodeGetSystemMetrics(SM_SWAPBUTTON) which returns TRUE if the mouse buttons have been swapped.
            
            Although the least significant bit of the return value indicates whether the key has been pressed since the last query, due to the pre-emptive multitasking nature of Windows, another application can call GetAsyncKeyState and receive the "recently pressed" bit instead of your application. The behavior of the least significant bit of the return value is retained strictly for compatibility with 16-bit Windows applications (which are non-preemptive) and should not be relied upon.
            
            You can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for the vKey parameter. This gives the state of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. 
            
            Windows NT/2000/XP: You can use the following virtual-key code constants as values for vKey to distinguish between the left and right instances of those keys. 
            
            Code Meaning 
            VK_LSHIFT Left-shift key. 
            VK_RSHIFT Right-shift key. 
            VK_LCONTROL Left-control key. 
            VK_RCONTROL Right-control key. 
            VK_LMENU Left-menu key. 
            VK_RMENU Right-menu key. 
            
            These left- and right-distinguishing constants are only available when you call the GetKeyboardState, SetKeyboardState, GetAsyncKeyState, GetKeyState, and MapVirtualKey functions. 
            </remarks>
        </member>
        <member name="M:WindowsInput.WindowsInputDeviceStateAdaptor.IsTogglingKeyInEffect(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the toggling key is toggled on (in-effect) or not by calling the <see cref="M:Windows.Win32.PInvoke.GetKeyState(System.Int32)"/> function.  (See: http://msdn.microsoft.com/en-us/library/ms646301(VS.85).aspx)
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the toggling key is toggled on (in-effect); otherwise, <c>false</c>.
            </returns>
            <remarks>
            The key status returned from this function changes as a thread reads key messages from its message queue. The status does not reflect the interrupt-level state associated with the hardware. Use the GetAsyncKeyState function to retrieve that information. 
            An application calls GetKeyState in response to a keyboard-input message. This function retrieves the state of the key when the input message was generated. 
            To retrieve state information for all the virtual keys, use the GetKeyboardState function. 
            An application can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for the nVirtKey parameter. This gives the status of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. An application can also use the following virtual-key code constants as values for nVirtKey to distinguish between the left and right instances of those keys. 
            VK_LSHIFT
            VK_RSHIFT
            VK_LCONTROL
            VK_RCONTROL
            VK_LMENU
            VK_RMENU
            
            These left- and right-distinguishing constants are available to an application only through the GetKeyboardState, SetKeyboardState, GetAsyncKeyState, GetKeyState, and MapVirtualKey functions. 
            </remarks>
        </member>
        <member name="T:WindowsInput.WindowsInputMessageDispatcher">
            <summary>
            Implements the <see cref="T:WindowsInput.IInputMessageDispatcher"/> by calling <see cref="M:Windows.Win32.PInvoke.SendInput(System.UInt32,Windows.Win32.UI.Input.KeyboardAndMouse.INPUT*,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:WindowsInput.WindowsInputMessageDispatcher.DispatchInput(Windows.Win32.UI.Input.KeyboardAndMouse.INPUT[])">
            <summary>
            Dispatches the specified list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages in their specified order by issuing a single called to <see cref="M:Windows.Win32.PInvoke.SendInput(System.UInt32,Windows.Win32.UI.Input.KeyboardAndMouse.INPUT*,System.Int32)"/>.
            </summary>
            <param name="inputs">The list of <see cref="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT"/> messages to be dispatched.</param>
            <exception cref="T:System.ArgumentException">If the <paramref name="inputs"/> array is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="inputs"/> array is null.</exception>
            <exception cref="T:System.Exception">If the any of the commands in the <paramref name="inputs"/> array could not be sent successfully.</exception>
        </member>
        <member name="T:Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT">
            <summary>Contains information about a simulated message generated by an input device other than a keyboard or mouse.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-hardwareinput">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT.uMsg">
            <summary>
            <para>Type: <b>DWORD</b> The message generated by the input hardware.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-hardwareinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT.wParamL">
            <summary>
            <para>Type: <b>WORD</b> The low-order word of the <i>lParam </i> parameter for <b>uMsg</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-hardwareinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT.wParamH">
            <summary>
            <para>Type: <b>WORD</b> The high-order word of the <i>lParam </i> parameter for <b>uMsg</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-hardwareinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT">
            <summary>Used by SendInput to store information for synthesizing input events such as keystrokes, mouse movement, and mouse clicks.</summary>
            <remarks>
            <para><b> INPUT_KEYBOARD</b> supports nonkeyboard input methods, such as handwriting recognition or voice recognition, as if it were text input by using the <b>KEYEVENTF_UNICODE</b> flag. For more information, see the remarks section of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-keybdinput">KEYBDINPUT</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-input#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT.type">
            <summary>Type: <b>DWORD</b></summary>
        </member>
        <member name="T:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT">
            <summary>Contains information about a simulated keyboard event.</summary>
            <remarks>
            <para><b> INPUT_KEYBOARD</b> supports nonkeyboard-input methods—such as handwriting recognition or voice recognition—as if it were text input by using the <b>KEYEVENTF_UNICODE</b> flag. If <b>KEYEVENTF_UNICODE</b> is specified, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-sendinput">SendInput</a> sends a <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a> or <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-keyup">WM_KEYUP</a> message to the foreground thread's message queue with <i>wParam</i> equal to <b>VK_PACKET</b>. Once <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmessage">GetMessage</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-peekmessagea">PeekMessage</a> obtains this message, passing the message to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-translatemessage">TranslateMessage</a> posts a <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-char">WM_CHAR</a> message with the Unicode character originally specified by <b>wScan</b>. This Unicode character will automatically be converted to the appropriate ANSI value if it is posted to an ANSI window. Set the <b>KEYEVENTF_SCANCODE</b> flag to define keyboard input in terms of the scan code. This is useful to simulate a physical keystroke regardless of which keyboard is currently being used. The virtual key value of a key may alter depending on the current keyboard layout or what other keys were pressed, but the scan code will always be the same.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-keybdinput#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT.wVk">
            <summary>
            <para>Type: <b>WORD</b> A <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">virtual-key code</a>. The code must be a value in the range 1 to 254. If the <b>dwFlags</b> member specifies <b>KEYEVENTF_UNICODE</b>, <b>wVk</b> must be 0.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-keybdinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT.wScan">
            <summary>
            <para>Type: <b>WORD</b> A hardware scan code for the key. If <b>dwFlags</b> specifies <b>KEYEVENTF_UNICODE</b>, <b>wScan</b> specifies a Unicode character which is to be sent to the foreground application.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-keybdinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT.dwFlags">
            <summary>Type: <b>DWORD</b></summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT.time">
            <summary>
            <para>Type: <b>DWORD</b> The time stamp for the event, in milliseconds. If this parameter is zero, the system will provide its own time stamp.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-keybdinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT.dwExtraInfo">
            <summary>
            <para>Type: <b>ULONG_PTR</b> An additional value associated with the keystroke. Use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmessageextrainfo">GetMessageExtraInfo</a> function to obtain this information.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-keybdinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT">
            <summary>Contains information about a simulated mouse event.</summary>
            <remarks>
            <para>If the mouse has moved, indicated by **MOUSEEVENTF_MOVE**, **dx** and **dy** specify information about that movement. The information is specified as absolute or relative integer values. If **MOUSEEVENTF_ABSOLUTE** value is specified, **dx** and **dy** contain normalized absolute coordinates between 0 and 65,535. The event procedure maps these coordinates onto the display surface. Coordinate (0,0) maps onto the upper-left corner of the display surface; coordinate (65535,65535) maps onto the lower-right corner. In a multimonitor system, the coordinates map to the primary monitor. If **MOUSEEVENTF_VIRTUALDESK** is specified, the coordinates map to the entire virtual desktop. If the **MOUSEEVENTF_ABSOLUTE** value is not specified, **dx**and **dy** specify movement relative to the previous mouse event (the last reported position). Positive values mean the mouse moved right (or down); negative values mean the mouse moved left (or up). Relative mouse motion is subject to the effects of the mouse speed and the two-mouse threshold values. A user sets these three values with the **Pointer Speed** slider of the Control Panel's **Mouse Properties** sheet. You can obtain and set these values using the [SystemParametersInfo](/windows/desktop/api/winuser/nf-winuser-systemparametersinfoa) function. The system applies two tests to the specified relative mouse movement. If the specified distance along either the x or y axis is greater than the first mouse threshold value, and the mouse speed is not zero, the system doubles the distance. If the specified distance along either the x or y axis is greater than the second mouse threshold value, and the mouse speed is equal to two, the system doubles the distance that resulted from applying the first threshold test. It is thus possible for the system to multiply specified relative mouse movement along the x or y axis by up to four times.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-mouseinput#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.dx">
            <summary>
            <para>Type: **LONG** The absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the **dwFlags** member. Absolute data is specified as the x coordinate of the mouse; relative data is specified as the number of pixels moved.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-mouseinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.dy">
            <summary>
            <para>Type: **LONG** The absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the **dwFlags** member. Absolute data is specified as the y coordinate of the mouse; relative data is specified as the number of pixels moved.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-mouseinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.mouseData" -->
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.dwFlags">
            <summary>Type: **DWORD**</summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.time">
            <summary>
            <para>Type: **DWORD** The time stamp for the event, in milliseconds. If this parameter is 0, the system will provide its own time stamp.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-mouseinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.dwExtraInfo">
            <summary>
            <para>Type: **ULONG_PTR** An additional value associated with the mouse event. An application calls [GetMessageExtraInfo](/windows/desktop/api/winuser/nf-winuser-getmessageextrainfo) to obtain this extra information.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-mouseinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "User32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetAsyncKeyState(System.Int32)">
            <summary>Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState.</summary>
            <param name="vKey">
            <para>Type: <b>int</b> The virtual-key code. For more information, see <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">Virtual Key Codes</a>. You can use left- and right-distinguishing constants to specify certain keys. See the Remarks section for further information.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getasynckeystate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>SHORT</b> If the function succeeds, the return value specifies whether the key was pressed since the last call to <b>GetAsyncKeyState</b>, and whether the key is currently up or down. If the most significant bit is set, the key is down, and if the least significant bit is set, the key was pressed after the previous call to <b>GetAsyncKeyState</b>. However, you should not rely on this last behavior; for more information, see the Remarks. The return value is zero for the following cases: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getasynckeystate">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetKeyState(System.Int32)">
            <summary>Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off�alternating each time the key is pressed).</summary>
            <param name="nVirtKey">
            <para>Type: <b>int</b> A virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9), <i>nVirtKey</i> must be set to the ASCII value of that character. For other keys, it must be a virtual-key code. If a non-English keyboard layout is used, virtual keys with values in the range ASCII A through Z and 0 through 9 are used to specify most of the character keys. For example, for the German keyboard layout, the virtual key of value ASCII O (0x4F) refers to the "o" key, whereas VK_OEM_1 refers to the "o with umlaut" key.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeystate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>SHORT</b> The return value specifies the status of the specified virtual key, as follows: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getkeystate">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SendInput(System.UInt32,Windows.Win32.UI.Input.KeyboardAndMouse.INPUT*,System.Int32)">
            <summary>Synthesizes keystrokes, mouse motions, and button clicks.</summary>
            <param name="cInputs">
            <para>Type: <b>UINT</b> The number of structures in the <i>pInputs</i> array.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendinput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pInputs">
            <para>Type: <b>LPINPUT</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input">INPUT</a> structures. Each structure represents an event to be inserted into the keyboard or mouse input stream.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendinput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="cbSize">
            <para>Type: <b>int</b> The size, in bytes, of an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input">INPUT</a> structure. If <i>cbSize</i> is not the size of an <b>INPUT</b> structure, the function fails.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendinput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>UINT</b> The function returns the number of events that it successfully inserted into the keyboard or mouse input stream. If the function returns zero, the input was already blocked by another thread. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. This function fails when it is blocked by UIPI. Note that neither <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> nor the return value will indicate the failure was caused by UIPI blocking.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-sendinput">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Windows.Win32.PInvoke.MapVirtualKey(System.UInt32,System.UInt32)" -->
    </members>
</doc>
